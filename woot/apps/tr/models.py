# apps.tr.models

# django
from django.db import models

# local
from apps.client.models import Client, Project
from apps.users.models import User

# util

### Create your models here.

### PRODUCTS
class TranscriptionList(models.Model):
	'''
	This is the first final product of the process. It is simply a list of transcriptions,
	their best utterances, and the users that did them.

	It belongs to an end client and is part of a project: Project.generate_transcription_list()
	'''

	### Connections
	client = models.ForeignKey(Client, related_name='transcription_lists')
	project = models.ForeignKey(Project, related_name='transcription_lists')

	# sub: transcription, audiofile

	### Properties
	metadata = models.TextField(default='')
	date_created = models.DateTimeField(auto_now_add=True)
	file = models.FileField(upload_to='transcription-lists')

class Grammar(models.Model):
	'''
	This is the second final product. It is an XML document generated from the best utterances.

	It belongs to an end client and is part of a project: Project.generate_grammar()
	'''

	### Connections
	client = models.ForeignKey(Client, related_name='grammars')
	project = models.ForeignKey(Project, related_name='grammars')

	# sub: transcription, audiofile

	### Properties
	metadata = models.TextField(default='')
	date_created = models.DateTimeField(auto_now_add=True)
	file = models.FileField(upload_to='grammars')

### STRUCTURES
class Sample(models.Model):
	'''
	A set of transcriptions sampled from a single project to be subjected to a trial as a group.
	When such a group is transcribed, it can be used to generate an automatic grammar that will be
	applied to the rest of the project, or indeed, another sample. A single transcription can
	appear in multiple samples.

	'''

	### Connections
	client = models.ForeignKey(Client, related_name='samples')
	project = models.ForeignKey(Project, related_name='samples')

	### Properties

class Transcription(models.Model):
	'''
	The central object of the system. It is the connection between audio data and text utterances.

	'''

	### Connections
	client = models.ForeignKey(Client, related_name='trs')
	project = models.ForeignKey(Project, related_name='trs')

	### Properties
	original_utterance = models.CharField(max_length=255, default='')
	requests = models.IntegerField(default=0)
	date_created = models.DateTimeField(auto_now_add=True)
	date_last_requested = models.DateTimeField(auto_now=True)

	### Methods

class TranscriptionInstance(models.Model):
	'''
	A transcription as part of a sample.
	'''

	### Connections
	client = models.ForeignKey(Client, related_name='trsi')
	project = models.ForeignKey(Project, related_name='trsi')
	sample = models.ForeignKey(Sample, related_name='trsi')

	### Properties
	requests = models.IntegerField(default=0)
	date_created = models.DateTimeField(auto_now_add=True)
	date_last_requested = models.DateTimeField(auto_now=True)

class RecognisedUtterance(models.Model):
	'''
	A text utterance generated by a speech recogniser.
	'''

	### Connections
	client = models.ForeignKey(Client, related_name='rus')
	project = models.ForeignKey(Project, related_name='rus')
	sample = models.ForeignKey(Sample, related_name='rus')
	tr = models.ForeignKey(Transcription, related_name='rus')
	tri = models.ForeignKey(Transcription, related_name='rus')

	### Properties
	recogniser = models.CharField(max_length=255)
	text = models.TextField()
	metadata = models.TextField()
	date_created = models.DateTimeField(auto_now_add=True)

class UserUtterance(models.Model):
	'''
	A text utterance transcribed by a user.
	'''

	### Connections
	client = models.ForeignKey(Client, related_name='uus')
	project = models.ForeignKey(Project, related_name='uus')
	sample = models.ForeignKey(Sample, related_name='uus')
	tr = models.ForeignKey(Transcription, related_name='uus')
	tri = models.ForeignKey(Transcription, related_name='uus')

	### Properties
	recogniser = models.CharField(max_length=255)
	text = models.TextField()
	metadata = models.TextField()
	date_created = models.DateTimeField(auto_now_add=True)

class UserComment(models.Model):
	pass

class ModeratorComment(models.Model):
	pass

class IssueTag(models.Model):
	pass

class Word(models.Model):
	pass

class Tag(models.Model):
	pass

class ClientSpecificTag(models.Model):
	### Connections

	### Properties

	pass
