{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 AvenirNext-Regular;}
{\colortbl;\red255\green255\blue255;}
\deftab560
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab560\sl336\slmult1\pardirnatural\partightenfactor0

\f0\fs34 \cf0 Incrementing text field\
\
1. Input\
2. Right\
3. Right Completion\
4. Shift right\
5. Left\
6. Shift left\
7. Backspace\
8. Paste\
9. Focus from right\
10. Focus from left\
11. Mouseup\
\
I only care about the offset so I can have "right completion" at the end\
\
I do not care about selection in any way\
\
I do not care about text length other than to know where the end is\
\
Order of events for right arrow for example\
1. Key down, default event happens, document selection changes\
2. Key up, trigger setOffset, then behaviours.right, which includes checking offset and calling completion\
\
Don't care where clicking happens at all. Only care if it is at end. This will be checked on right complete.\
\
NEW IDEA FOR INPUT\
____________________\
Items in a list each have a certain layout. They can display several different types of data in different places like a main text string, an index and other information. Have the "input" be a blank template of one of these items. Each place in the item that is represented by text is an "input" and will trigger the autocomplete, but only for the text found in that "field" for each item. That would look so sexy.}