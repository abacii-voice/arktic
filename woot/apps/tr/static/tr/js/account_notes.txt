transcription interface elements
1. Counter
2. Autocomplete
3. Audio
4. Tokens
5. Original caption
6. Modified caption
7. Info panel
8. Previous button
9. Next button
10. Done button
11. Flags button

The point of user input is the Autocomplete. This is where all data added to the system is entered.

2016/7/7:
1. Fully construct token and rendered text fields with options.
2. Set up connection between search input and text fields.
3. Set up connection between modified caption and tokens (scroll to and edit).
4. Set up connection between original caption and tokens/modified (copy).
5. Set up states: transcription-state-interface, transcription-state-info,
6. Connection between done button and the counter

IDEA: Use current words to search database for transcriptions with similar words and add to autocomplete

2016/8/15:
rendered text field -> caption field
Still trying to do this caption field
Behaviour cases:

1. Focus autocomplete
	a. caption was Focused?

2. Focus caption (active token glued to caret)
	a. Make token active

3. Input autocomplete
	a. beginning of active token -> previous |active
	b. in the middle -> a|ctive
	c. at the end -> active| next

4. Input caption
	a. beginning of active token -> previous |active
	b. in the middle -> a|ctive
	c. at the end -> active| next

2016/08/21:
Thinking about input behaviours
1. Autocomplete object
	a. input
		right, enter, backspace, click, focus, blur

	b. list
		up, down, click


TODO:
1. add virtual data to each unit as property for easy access
2. apply same Promise.all to list items for speed (replicate method used for caption)
3.


caption
- active unit, query, complete, etc.
- active virtual, active token

1. blank
2. add items to virtual

{
	id: 'new-transcription-id', // optional
	index: 0, // where to place in current virtual, default = length
	virtual: [ // implicit index
		{
			// given
			query: '',
			tokens: [ // implicit index
				{
					content: '',
					type: '',
				},
			],

			// calculated
			focus: 0, // based on the length of the query relative to complete
			complete: '', // can be provided by phrase
			combined: '',
			queryTokens: [],
			completeTokens: [],
			combinedTokens: [],
		}
	]
}

3. for each item in virtual, render to tokens (store bindings, queries, complete, combined)
4.


ways to cause tokens to re-render
1. change complete by changing query
2. select multiple tokens
3. enter or space for new word

BIG CHANGES:
1. Remove registry and permissions entirely. Or make permission feed off Context.
2. Load code in Django template according to permission. Get small permission summary of user before loading.
3. Split components into individual files
4. Modify django models to include my personal serialisation
5. use websockets for message passing
6. nested state system. restrict accessibility. enhance specificity.

search and replace
1. underscores with spaces
2. @hes@ [hesitation]

________________________________________
bugs with caption:
1. when a completed phrase is edited in the middle, right arrow at the end of any word in the phrase will go to the end of the next word.
2. editing the middle of the last token in a completed phrase causes the caret to go to the end of the word.
3. long phrases do not display fully. may have something to do with rendered boundary.
4. phrases not loading when typed in the caption. load fine in the autocomplete.
5. caret disappears when completing long phrases. setActive is still working with right arrow though. Just not focus.

caption needs to follow predictable loop:
1. type something in caption
2. query is wrapped up and sent to autocomplete
3. autocomplete treats the query as it would its own query
4. autocomplete setMetadata events trigger caption setMetadata events
5. caption is re-rendered efficiently

other things that can affect the caption
1. right arrow complete
2. left or right arrow next or previous
3. enter new phrase
4. backspace remove phrase
5.

|||_____
Bindings left:
1. backspace (remove phrase)
3. space if no other options (confirm phrase)
4. right arrow (confirm phrase)
4. numbers (complete phrase)
5. selection (merge phrases)
6. alt + left, alt + right (focus end next previous)
7. alt + backspace (remove phrase)

NEW IDEA:

1. Replace all string.filter with `${}` format
2. Encompass every arg that isn't children into the 'ui' arg.
3. Remove names and ids. Id will be derived from name and parent id at render.
4. New ui.styles arg: tree of styles that are applied to child objects and resolved before render.
5. Child objects now fetched with .get(path) format. Path is dotted names. Not cc or cctree.
6. Replace all open promises with Util.ep format.
7. Creating standard searchable list unit that can be modified using properties before render.
8. Searchable list needs list, autocomplete, and dropdown modes.
9. Properties such as bindings can be set that will later be done at render.

2017/03/27:

For the new idea, I am working top down, writing as though the structure beneath already exists. I want to represent it the way that makes the most sense to me and have the machinery represent that. Anything that doesn't make sense on a machinery level can be changed.

For single components, there is a design philosophy:
	1. Clearly divide the ideas of defined-time and render-time
		a. Name, appearance, bindings, states, template, after, and children can be known at define-time
		b. Id, root, model, element, style tree, and all applied bindings and appearance can only be known at render-time, since most of it depends on knowing the root.
	2. Allow the use of secondary constructors for things like units:

		listUnitEntity = function () {
			var _entity = this;
			_entity.create = function (datum, query, index) {
				return UI.createComponent(`${index}`, {
					ui: _entity.ui,
					children: [
						UI.createComponent('some-wrapper-child', {
							ui: {},
							children: _entity.children,
						}),
					],
				}).then(function (base) {
					for (methodName in _entity.methods) {
						base[methodName] = _entity.methods[methodName].bind(base);
					}
				}).then(function () {
					return base;
				})
			}
			_entity.ui = {
				bindings: {},
				appearance: {},
				styles: {},
				states: {},
			}
			_entity.children = [];
			_entity.methods = {
				activate: function (_this) {

				},
				deactivate: function (_this) {

				},
			}
		}

		// setup list unit entity to create units
		list.unit = listUnitEntity()

		// modify unit properties
		list.unit.ui.bindings = {

		}
		list.unit.children = [
			UI.createComponent('some-child'),
		]
		list.unit.methods.add = function (_this) {
			return _this.addChild();
		}

		// actually create an individual unit
		list.unit.create(datum, query, index).then(function (unit) {
			return unit.activate();
		})

		This is all theoretical. I would need to test this. 
